openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/business/business_area/:
    get:
      operationId: listBusinessAreas
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessArea'
          description: ''
      tags:
      - api
    post:
      operationId: createBusinessArea
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BusinessArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BusinessArea'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessArea'
          description: ''
      tags:
      - api
  /api/business/business_area/{id}/:
    get:
      operationId: retrieveBusinessArea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this business area.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessArea'
          description: ''
      tags:
      - api
    put:
      operationId: updateBusinessArea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this business area.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BusinessArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BusinessArea'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessArea'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateBusinessArea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this business area.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BusinessArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BusinessArea'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessArea'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyBusinessArea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this business area.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/user/user/me/:
    get:
      operationId: listUserMes
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
  /api/user/user/me/profile/:
    get:
      operationId: retrieveUserProfile
      description: View to work with profile for the currently logged in user
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
    put:
      operationId: updateUserProfile
      description: View to work with profile for the currently logged in user
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
      tags:
      - api
  /api/idea/idea/:
    get:
      operationId: listIdeas
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Idea'
          description: ''
      tags:
      - api
    post:
      operationId: createIdea
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Idea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Idea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Idea'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idea'
          description: ''
      tags:
      - api
  /api/idea/idea/{id}/:
    get:
      operationId: retrieveIdea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this idea.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeaDetail'
          description: ''
      tags:
      - api
    put:
      operationId: updateIdea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this idea.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Idea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Idea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Idea'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idea'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateIdea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this idea.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Idea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Idea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Idea'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idea'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyIdea
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this idea.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/idea/vote/:
    get:
      operationId: listVotes
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
          description: ''
      tags:
      - api
    post:
      operationId: createVote
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
      tags:
      - api
  /api/idea/vote/{id}/:
    get:
      operationId: retrieveVote
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this vote.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
      tags:
      - api
    put:
      operationId: updateVote
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this vote.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateVote
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this vote.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyVote
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this vote.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/user/auth/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - api
  /api/user/auth/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - api
  /api/user/auth/token/blacklist/:
    post:
      operationId: createTokenBlacklist
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
components:
  schemas:
    BusinessArea:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          maxLength: 64
        description:
          type: string
        users:
          type: array
          items:
            type: integer
      required:
      - name
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          enum:
          - CONTRIBUTOR
          - MODERATOR
          - ADMIN
          type: string
        user:
          type: string
          readOnly: true
    Idea:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_by:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            label:
              type: string
              readOnly: true
              description: The full name of the user if it exists, otherwise the username
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        visibility:
          enum:
          - PUBLIC
          - BUSINESS_AREA
          - PRIVATE
          type: string
        campaign:
          type: integer
      required:
      - title
      - description
      - campaign
    IdeaDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_by:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            label:
              type: string
              readOnly: true
              description: The full name of the user if it exists, otherwise the username
          readOnly: true
        round_votes:
          type: array
          items:
            type: object
            properties:
              round_pk:
                type: integer
              count:
                type: integer
            required:
            - round_pk
            - count
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        visibility:
          enum:
          - PUBLIC
          - BUSINESS_AREA
          - PRIVATE
          type: string
        campaign:
          type: integer
      required:
      - round_votes
      - title
      - description
      - campaign
    Vote:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_by:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            label:
              type: string
              readOnly: true
              description: The full name of the user if it exists, otherwise the username
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        idea:
          type: integer
        round:
          type: integer
      required:
      - idea
      - round
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
