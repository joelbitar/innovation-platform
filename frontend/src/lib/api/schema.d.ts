/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/business/business_area//": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["business_business_area_list"];
        put?: never;
        post: operations["business_business_area_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/business/business_area//{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["business_business_area_retrieve"];
        put: operations["business_business_area_update"];
        post?: never;
        delete: operations["business_business_area_destroy"];
        options?: never;
        head?: never;
        patch: operations["business_business_area_partial_update"];
        trace?: never;
    };
    "/api/campaign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["campaign_list"];
        put?: never;
        post: operations["campaign_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/campaign/{campaign_id}/round/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["campaign_round_list"];
        put?: never;
        post: operations["campaign_round_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/campaign/{campaign_id}/round/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["campaign_round_retrieve"];
        put: operations["campaign_round_update"];
        post?: never;
        delete: operations["campaign_round_destroy"];
        options?: never;
        head?: never;
        patch: operations["campaign_round_partial_update"];
        trace?: never;
    };
    "/api/campaign/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["campaign_retrieve"];
        put: operations["campaign_update"];
        post?: never;
        delete: operations["campaign_destroy"];
        options?: never;
        head?: never;
        patch: operations["campaign_partial_update"];
        trace?: never;
    };
    "/api/idea/campaign/{campaign_id}/idea/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_campaign_idea_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/idea/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_idea_list"];
        put?: never;
        post: operations["idea_idea_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/idea/{idea_id}/information/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_idea_information_list"];
        put?: never;
        post: operations["idea_idea_information_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/idea/{idea_id}/information/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_idea_information_retrieve"];
        put: operations["idea_idea_information_update"];
        post?: never;
        delete: operations["idea_idea_information_destroy"];
        options?: never;
        head?: never;
        patch: operations["idea_idea_information_partial_update"];
        trace?: never;
    };
    "/api/idea/idea/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_idea_retrieve"];
        put: operations["idea_idea_update"];
        post?: never;
        delete: operations["idea_idea_destroy"];
        options?: never;
        head?: never;
        patch: operations["idea_idea_partial_update"];
        trace?: never;
    };
    "/api/idea/round/{round_id}/idea/{idea_id}/information/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_round_idea_information_list"];
        put?: never;
        post: operations["idea_round_idea_information_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/round/{round_id}/idea/{idea_id}/information/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_round_idea_information_retrieve"];
        put: operations["idea_round_idea_information_update"];
        post?: never;
        delete: operations["idea_round_idea_information_destroy"];
        options?: never;
        head?: never;
        patch: operations["idea_round_idea_information_partial_update"];
        trace?: never;
    };
    "/api/idea/round/{round_id}/idea/{idea_id}/vote/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_round_idea_vote_me_list"];
        put?: never;
        post: operations["idea_round_idea_vote_me_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/round/{round_id}/vote/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_round_vote_me_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/vote/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_vote_list"];
        put?: never;
        post: operations["idea_vote_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/idea/vote/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["idea_vote_retrieve"];
        put: operations["idea_vote_update"];
        post?: never;
        delete: operations["idea_vote_destroy"];
        options?: never;
        head?: never;
        patch: operations["idea_vote_partial_update"];
        trace?: never;
    };
    "/api/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View to return data about a specific user */
        get: operations["user_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View to return data about the currently logged in user */
        get: operations["user_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View to work with profile for the currently logged in user */
        get: operations["user_me_profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AbbreviatedUser: {
            readonly id: number;
            /** @description The full name of the user if it exists, otherwise the username */
            readonly label: string | null;
        };
        BusinessArea: {
            readonly id: number;
            readonly slug: string;
            name: string;
            description?: string;
            users?: number[];
        };
        Campaign: {
            readonly id: number;
            readonly created_by: components["schemas"]["AbbreviatedUser"];
            name: string;
            description: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            business_areas?: number[];
        };
        CampaignRound: {
            readonly id: number;
            readonly created_by: components["schemas"]["AbbreviatedUser"];
            name: string;
            description?: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            campaign: number;
        };
        Idea: {
            readonly id: number;
            readonly created_by: components["schemas"]["AbbreviatedUser"];
            title: string;
            description: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            visibility?: components["schemas"]["VisibilityEnum"];
            campaign: number;
        };
        IdeaDetail: {
            readonly id: number;
            readonly created_by: components["schemas"]["AbbreviatedUser"];
            round_votes: components["schemas"]["RoundVotes"][];
            title: string;
            description: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            visibility?: components["schemas"]["VisibilityEnum"];
            campaign: number;
        };
        IdeaInformation: {
            readonly id: number;
            readonly created_by: components["schemas"]["AbbreviatedUser"];
            /** Format: date-time */
            deleted_at?: string | null;
            /** Format: date-time */
            restored_at?: string | null;
            /** Format: uuid */
            transaction_id?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            title?: string;
            text?: string;
            /** Format: uri */
            file?: string | null;
            idea?: number;
            folder?: number | null;
            round?: number | null;
        };
        Login: {
            username: string;
            password: string;
        };
        PatchedBusinessArea: {
            readonly id?: number;
            readonly slug?: string;
            name?: string;
            description?: string;
            users?: number[];
        };
        PatchedCampaign: {
            readonly id?: number;
            readonly created_by?: components["schemas"]["AbbreviatedUser"];
            name?: string;
            description?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            business_areas?: number[];
        };
        PatchedCampaignRound: {
            readonly id?: number;
            readonly created_by?: components["schemas"]["AbbreviatedUser"];
            name?: string;
            description?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            campaign?: number;
        };
        PatchedIdea: {
            readonly id?: number;
            readonly created_by?: components["schemas"]["AbbreviatedUser"];
            title?: string;
            description?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            visibility?: components["schemas"]["VisibilityEnum"];
            campaign?: number;
        };
        PatchedIdeaInformation: {
            readonly id?: number;
            readonly created_by?: components["schemas"]["AbbreviatedUser"];
            /** Format: date-time */
            deleted_at?: string | null;
            /** Format: date-time */
            restored_at?: string | null;
            /** Format: uuid */
            transaction_id?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            title?: string;
            text?: string;
            /** Format: uri */
            file?: string | null;
            idea?: number;
            folder?: number | null;
            round?: number | null;
        };
        PatchedVote: {
            readonly id?: number;
            readonly created_by?: components["schemas"]["AbbreviatedUser"];
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            idea?: number;
            round?: number;
        };
        RoundVotes: {
            round_pk: number;
            count: number;
        };
        /**
         * @description * `CONTRIBUTOR` - Contributor
         *     * `MODERATOR` - Moderator
         *     * `ADMIN` - Admin
         * @enum {string}
         */
        TypeEnum: "CONTRIBUTOR" | "MODERATOR" | "ADMIN";
        UserProfile: {
            readonly id: number;
            type?: components["schemas"]["TypeEnum"];
            readonly user: number;
        };
        UserWithPermissions: {
            readonly id: number;
            /** @description The full name of the user if it exists, otherwise the username */
            readonly label: string | null;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            first_name?: string;
            last_name?: string;
            readonly profile: components["schemas"]["UserProfile"];
            readonly permissions: string;
            readonly group_permissions: string;
            readonly is_staff: boolean;
            readonly is_superuser: boolean;
        };
        /**
         * @description * `PUBLIC` - Public
         *     * `BUSINESS_AREA` - Business Area
         *     * `PRIVATE` - Private
         * @enum {string}
         */
        VisibilityEnum: "PUBLIC" | "BUSINESS_AREA" | "PRIVATE";
        Vote: {
            readonly id: number;
            readonly created_by: components["schemas"]["AbbreviatedUser"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            idea: number;
            round: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
                "application/x-www-form-urlencoded": components["schemas"]["Login"];
                "multipart/form-data": components["schemas"]["Login"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Login"];
                };
            };
        };
    };
    auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    business_business_area_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessArea"][];
                };
            };
        };
    };
    business_business_area_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BusinessArea"];
                "application/x-www-form-urlencoded": components["schemas"]["BusinessArea"];
                "multipart/form-data": components["schemas"]["BusinessArea"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessArea"];
                };
            };
        };
    };
    business_business_area_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this business area. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessArea"];
                };
            };
        };
    };
    business_business_area_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this business area. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BusinessArea"];
                "application/x-www-form-urlencoded": components["schemas"]["BusinessArea"];
                "multipart/form-data": components["schemas"]["BusinessArea"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessArea"];
                };
            };
        };
    };
    business_business_area_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this business area. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    business_business_area_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this business area. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBusinessArea"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBusinessArea"];
                "multipart/form-data": components["schemas"]["PatchedBusinessArea"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessArea"];
                };
            };
        };
    };
    campaign_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"][];
                };
            };
        };
    };
    campaign_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Campaign"];
                "application/x-www-form-urlencoded": components["schemas"]["Campaign"];
                "multipart/form-data": components["schemas"]["Campaign"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    campaign_round_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignRound"][];
                };
            };
        };
    };
    campaign_round_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignRound"];
                "application/x-www-form-urlencoded": components["schemas"]["CampaignRound"];
                "multipart/form-data": components["schemas"]["CampaignRound"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignRound"];
                };
            };
        };
    };
    campaign_round_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignRound"];
                };
            };
        };
    };
    campaign_round_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignRound"];
                "application/x-www-form-urlencoded": components["schemas"]["CampaignRound"];
                "multipart/form-data": components["schemas"]["CampaignRound"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignRound"];
                };
            };
        };
    };
    campaign_round_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    campaign_round_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCampaignRound"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCampaignRound"];
                "multipart/form-data": components["schemas"]["PatchedCampaignRound"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignRound"];
                };
            };
        };
    };
    campaign_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    campaign_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Campaign"];
                "application/x-www-form-urlencoded": components["schemas"]["Campaign"];
                "multipart/form-data": components["schemas"]["Campaign"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    campaign_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    campaign_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCampaign"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCampaign"];
                "multipart/form-data": components["schemas"]["PatchedCampaign"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    idea_campaign_idea_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaDetail"][];
                };
            };
        };
    };
    idea_idea_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"][];
                };
            };
        };
    };
    idea_idea_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Idea"];
                "application/x-www-form-urlencoded": components["schemas"]["Idea"];
                "multipart/form-data": components["schemas"]["Idea"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    idea_idea_information_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idea_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"][];
                };
            };
        };
    };
    idea_idea_information_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idea_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IdeaInformation"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaInformation"];
                "multipart/form-data": components["schemas"]["IdeaInformation"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_idea_information_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_idea_information_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IdeaInformation"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaInformation"];
                "multipart/form-data": components["schemas"]["IdeaInformation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_idea_information_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    idea_idea_information_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdeaInformation"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIdeaInformation"];
                "multipart/form-data": components["schemas"]["PatchedIdeaInformation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_idea_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaDetail"];
                };
            };
        };
    };
    idea_idea_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Idea"];
                "application/x-www-form-urlencoded": components["schemas"]["Idea"];
                "multipart/form-data": components["schemas"]["Idea"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    idea_idea_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    idea_idea_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdea"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIdea"];
                "multipart/form-data": components["schemas"]["PatchedIdea"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    idea_round_idea_information_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"][];
                };
            };
        };
    };
    idea_round_idea_information_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IdeaInformation"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaInformation"];
                "multipart/form-data": components["schemas"]["IdeaInformation"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_round_idea_information_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_round_idea_information_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IdeaInformation"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaInformation"];
                "multipart/form-data": components["schemas"]["IdeaInformation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_round_idea_information_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    idea_round_idea_information_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this information. */
                id: number;
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdeaInformation"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIdeaInformation"];
                "multipart/form-data": components["schemas"]["PatchedIdeaInformation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaInformation"];
                };
            };
        };
    };
    idea_round_idea_vote_me_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"][];
                };
            };
        };
    };
    idea_round_idea_vote_me_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idea_id: string;
                round_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Vote"];
                "application/x-www-form-urlencoded": components["schemas"]["Vote"];
                "multipart/form-data": components["schemas"]["Vote"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
        };
    };
    idea_round_vote_me_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                round_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"][];
                };
            };
        };
    };
    idea_vote_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"][];
                };
            };
        };
    };
    idea_vote_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Vote"];
                "application/x-www-form-urlencoded": components["schemas"]["Vote"];
                "multipart/form-data": components["schemas"]["Vote"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
        };
    };
    idea_vote_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vote. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
        };
    };
    idea_vote_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vote. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Vote"];
                "application/x-www-form-urlencoded": components["schemas"]["Vote"];
                "multipart/form-data": components["schemas"]["Vote"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
        };
    };
    idea_vote_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vote. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    idea_vote_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vote. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedVote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedVote"];
                "multipart/form-data": components["schemas"]["PatchedVote"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
        };
    };
    user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithPermissions"];
                };
            };
        };
    };
    user_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithPermissions"];
                };
            };
        };
    };
    user_me_profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
        };
    };
}
