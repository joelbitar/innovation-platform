services:
  frontend: &frontend
    build:
      context: .
      dockerfile: docker/frontend.dockerfile
      target: app_frontend_prod
    environment:
      - NODE_ENV=production
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"

  frontend-dev:
    <<: *frontend
    build:
      context: .
      dockerfile: docker/frontend.dockerfile
      target: app_frontend_dev
    restart: always
    command: yarn dev
    environment:
      - NODE_ENV=development
      - BACKEND_URL=http://backend.dkr:8000
      - REDIS_URL=redis://redis.dkr:6379
    env_file:
      - path: frontend/.env
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      ip_network:
        aliases:
          - frontend.dkr

  frontend-test:
    <<: *frontend
    command: yarn test
    environment:
      - NODE_ENV=development

  backend: &backend
    build:
      context: .
      dockerfile: docker/backend.dockerfile
      target: app_prod
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings
    env_file:
      - path: backend/.env
    ports:
      - "8001:8000"
    networks:
      ip_network:
        aliases:
          - backend.dkr

  backend-dev:
    <<: *backend
    build:
      context: .
      dockerfile: docker/backend.dockerfile
      target: app_dev
    environment:
        - DJANGO_SETTINGS_MODULE=app.settings-development
    volumes:
      - ./backend:/src
    ports:
      - "8000:8000"

  backend-test:
    <<: *backend
    command: python manage.py test
    build:
      context: .
      dockerfile: docker/backend.dockerfile
      target: app_test
    volumes:
      - ./backend:/src

  proxy-dev:
    build:
      context: .
      dockerfile: docker/proxy.dockerfile
      target: proxy_dev
    ports:
      - "4000:80"
    depends_on:
      - frontend-dev
      - backend-dev
    networks:
      ip_network:
        aliases:
          - proxy.dkr

  redis-dev:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      ip_network:
        aliases:
          - redis.dkr
  
  celery-worker-dev:
    build:
      context: .
      dockerfile: docker/backend.dockerfile
      target: celery_worker
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings
    volumes:
      - ./backend:/src
    depends_on:
      - redis-dev

networks:
  ip_network:
    name: ip_network